"""Jump to begin

This plug-in can be used to quickly find the begin statement following the
declaritive part of a package or subprogram (via the source editor's context 
menu). Nested subprograms in particular can make this begin statement somewhat 
cumbersome to find.
"""

###############################################################################
# No user customization below this line
###############################################################################

import GPS
from gps_utils import interactive


def __contextualMenuFilter(context):
    
    # Check if the context is generated by the source editor
    if not (context.module_name == 'Source_Editor'):
        return False
    
    # Get current view and cursor
    ev = GPS.EditorBuffer.get().current_view()
    c  = ev.cursor()
    
    # Return true if the name of the "active" subprogram is non-empty
    if c.subprogram_name():
        return True
    else:
        return False


def __contextualMenuLabel(context):
    
    # Get current view and cursor
    ev = GPS.EditorBuffer.get().current_view()
    c  = ev.cursor();
    
    # Name of the menu item
    return 'Jump to begin of <b>{}</b>'.format(c.subprogram_name())


def search_for_begin(ev, c, backward):
  
    # Name of the subprogram at the initial location
    name = c.subprogram_name()
  
    # Incremental search (with loop limit)
    for loop_count in range(0,1000):
        
        # Search
        c = c.search('begin', backward = backward, dialog_on_failure = False)     
        
        # If no 'begin' keyword has been found, return
        if (c == None):            
            return False
        
        # (Debug) Show search result
        # GPS.Console().write(str(c) + "\n")
        
        # Begin must be part of a package or subprogram
        if  c[0].subprogram_name() == name            and \
           (c[0].block_type()      == 'CAT_PACKAGE'   or  \
            c[0].block_type()      == 'CAT_PROCEDURE' or  \
            c[0].block_type()      == 'CAT_FUNCTION'  or  \
            c[0].block_type()      == 'CAT_TASK'      ):
            
            # Jump the found location
            ev.goto(c[0])
            ev.center(c[0])
            
            return True
        
        # Use correct element for search continuation
        if backward == True:
            c = c[0]
        else:
            c = c[1]

    # If loop limit has been reached
    return False
    

@interactive(
    name       ='Jump to begin',
    category   = 'Editor',
    contextual = __contextualMenuLabel,
    filter     = __contextualMenuFilter)
def on_activate():
    
    # Get current view
    ev = GPS.EditorBuffer.get().current_view()
    
    # Create a mark at the current location
    em = ev.cursor().create_mark()
    
    # Search forward or else backward
    success = search_for_begin(ev, em.location(), backward = False) or \
              search_for_begin(ev, em.location(), backward = True )
        
    # Show a message if not found
    if not success:
        GPS.Console().write \
          ('Begin of ' + em.location().subprogram_name() + ' not found.\n')
    
    # Always remove mark
    em.delete()
